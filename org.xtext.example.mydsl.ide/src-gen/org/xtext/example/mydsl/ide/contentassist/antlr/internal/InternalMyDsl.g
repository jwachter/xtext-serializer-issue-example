/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRoot
entryRuleRoot
:
{ before(grammarAccess.getRootRule()); }
	 ruleRoot
{ after(grammarAccess.getRootRule()); } 
	 EOF 
;

// Rule Root
ruleRoot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRootAccess().getGroup()); }
		(rule__Root__Group__0)
		{ after(grammarAccess.getRootAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnEntry
entryRuleAnEntry
:
{ before(grammarAccess.getAnEntryRule()); }
	 ruleAnEntry
{ after(grammarAccess.getAnEntryRule()); } 
	 EOF 
;

// Rule AnEntry
ruleAnEntry 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnEntryAccess().getGroup()); }
		(rule__AnEntry__Group__0)
		{ after(grammarAccess.getAnEntryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReferedType
entryRuleReferedType
:
{ before(grammarAccess.getReferedTypeRule()); }
	 ruleReferedType
{ after(grammarAccess.getReferedTypeRule()); } 
	 EOF 
;

// Rule ReferedType
ruleReferedType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferedTypeAccess().getRefAssignment()); }
		(rule__ReferedType__RefAssignment)
		{ after(grammarAccess.getReferedTypeAccess().getRefAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Root__Group__0__Impl
	rule__Root__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootAccess().getRootKeyword_0()); }
	'root'
	{ after(grammarAccess.getRootAccess().getRootKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Root__Group__1__Impl
	rule__Root__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRootAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Root__Group__2__Impl
	rule__Root__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootAccess().getRefAssignment_2()); }
	(rule__Root__RefAssignment_2)
	{ after(grammarAccess.getRootAccess().getRefAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Root__Group__3__Impl
	rule__Root__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRootAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Root__Group__4__Impl
	rule__Root__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Root__Group__5__Impl
	rule__Root__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootAccess().getEntriesAssignment_5()); }
	(rule__Root__EntriesAssignment_5)*
	{ after(grammarAccess.getRootAccess().getEntriesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Root__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getRootAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnEntry__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnEntry__Group__0__Impl
	rule__AnEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnEntry__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnEntryAccess().getRefKeyword_0()); }
	'ref'
	{ after(grammarAccess.getAnEntryAccess().getRefKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnEntry__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnEntry__Group__1__Impl
	rule__AnEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnEntry__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnEntryAccess().getKeyAssignment_1()); }
	(rule__AnEntry__KeyAssignment_1)
	{ after(grammarAccess.getAnEntryAccess().getKeyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnEntry__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnEntry__Group__2__Impl
	rule__AnEntry__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AnEntry__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnEntryAccess().getCommercialAtKeyword_2()); }
	'@'
	{ after(grammarAccess.getAnEntryAccess().getCommercialAtKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnEntry__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnEntry__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnEntry__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnEntryAccess().getValueAssignment_3()); }
	(rule__AnEntry__ValueAssignment_3)
	{ after(grammarAccess.getAnEntryAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__RefAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootAccess().getRefReferedTypeParserRuleCall_2_0()); }
		ruleReferedType
		{ after(grammarAccess.getRootAccess().getRefReferedTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__EntriesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootAccess().getEntriesAnEntryParserRuleCall_5_0()); }
		ruleAnEntry
		{ after(grammarAccess.getRootAccess().getEntriesAnEntryParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnEntry__KeyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnEntryAccess().getKeyReferedTypeParserRuleCall_1_0()); }
		ruleReferedType
		{ after(grammarAccess.getAnEntryAccess().getKeyReferedTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnEntry__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnEntryAccess().getValueReferedTypeParserRuleCall_3_0()); }
		ruleReferedType
		{ after(grammarAccess.getAnEntryAccess().getValueReferedTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferedType__RefAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferedTypeAccess().getRefSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getReferedTypeAccess().getRefSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
