/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefReferedTypeParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEntriesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEntriesAnEntryParserRuleCall_5_0 = (RuleCall)cEntriesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Root:
		//	'root' '(' ref=ReferedType ')' '{'
		//	entries+=AnEntry*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'root' '(' ref=ReferedType ')' '{' entries+=AnEntry* '}'
		public Group getGroup() { return cGroup; }
		
		//'root'
		public Keyword getRootKeyword_0() { return cRootKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ref=ReferedType
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }
		
		//ReferedType
		public RuleCall getRefReferedTypeParserRuleCall_2_0() { return cRefReferedTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//entries+=AnEntry*
		public Assignment getEntriesAssignment_5() { return cEntriesAssignment_5; }
		
		//AnEntry
		public RuleCall getEntriesAnEntryParserRuleCall_5_0() { return cEntriesAnEntryParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AnEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AnEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyReferedTypeParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueReferedTypeParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//AnEntry:
		//	'ref' key=ReferedType '@' value=ReferedType;
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' key=ReferedType '@' value=ReferedType
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//key=ReferedType
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//ReferedType
		public RuleCall getKeyReferedTypeParserRuleCall_1_0() { return cKeyReferedTypeParserRuleCall_1_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_2() { return cCommercialAtKeyword_2; }
		
		//value=ReferedType
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ReferedType
		public RuleCall getValueReferedTypeParserRuleCall_3_0() { return cValueReferedTypeParserRuleCall_3_0; }
	}
	public class ReferedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReferedType");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRefSTRINGTerminalRuleCall_0 = (RuleCall)cRefAssignment.eContents().get(0);
		
		//ReferedType:
		//	ref=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=STRING
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//STRING
		public RuleCall getRefSTRINGTerminalRuleCall_0() { return cRefSTRINGTerminalRuleCall_0; }
	}
	
	
	private final RootElements pRoot;
	private final AnEntryElements pAnEntry;
	private final ReferedTypeElements pReferedType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pAnEntry = new AnEntryElements();
		this.pReferedType = new ReferedTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	'root' '(' ref=ReferedType ')' '{'
	//	entries+=AnEntry*
	//	'}';
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//AnEntry:
	//	'ref' key=ReferedType '@' value=ReferedType;
	public AnEntryElements getAnEntryAccess() {
		return pAnEntry;
	}
	
	public ParserRule getAnEntryRule() {
		return getAnEntryAccess().getRule();
	}
	
	//ReferedType:
	//	ref=STRING;
	public ReferedTypeElements getReferedTypeAccess() {
		return pReferedType;
	}
	
	public ParserRule getReferedTypeRule() {
		return getReferedTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
